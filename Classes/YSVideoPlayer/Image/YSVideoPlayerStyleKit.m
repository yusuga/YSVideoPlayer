//
//  YSVideoPlayerStyleKit.m
//  YSVideoPlayer
//
//  Created by Yu Sugawara on 2015/11/27.
//  Copyright (c) 2015 Picos LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "YSVideoPlayerStyleKit.h"


@implementation YSVideoPlayerStyleKit

#pragma mark Cache

static UIImage* _imageOfPlay = nil;
static UIImage* _imageOfPause = nil;
static UIImage* _imageOfReplay = nil;
static UIImage* _imageOfSliderThumb = nil;
static UIImage* _imageOfReload = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawPlay
{

    //// arrow-37-icon Drawing
    UIBezierPath* arrow37iconPath = [UIBezierPath bezierPath];
    [arrow37iconPath moveToPoint: CGPointMake(10, 8)];
    [arrow37iconPath addLineToPoint: CGPointMake(0, 16)];
    [arrow37iconPath addLineToPoint: CGPointMake(0, 0)];
    [arrow37iconPath addLineToPoint: CGPointMake(10, 8)];
    [arrow37iconPath closePath];
    arrow37iconPath.miterLimit = 4;

    [UIColor.whiteColor setFill];
    [arrow37iconPath fill];
}

+ (void)drawPause
{

    //// pause-icon Drawing
    UIBezierPath* pauseiconPath = [UIBezierPath bezierPath];
    [pauseiconPath moveToPoint: CGPointMake(3.79, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(0, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(0, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(3.79, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(3.79, 15)];
    [pauseiconPath closePath];
    [pauseiconPath moveToPoint: CGPointMake(10, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(6.21, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(6.21, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(10, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(10, 0)];
    [pauseiconPath closePath];
    pauseiconPath.miterLimit = 4;

    [UIColor.whiteColor setFill];
    [pauseiconPath fill];
}

+ (void)drawReplay
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// refresh-2-icon Drawing
    CGContextSaveGState(context);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* refresh2iconPath = [UIBezierPath bezierPath];
    [refresh2iconPath moveToPoint: CGPointMake(-3.25, 6.51)];
    [refresh2iconPath addLineToPoint: CGPointMake(-1, 6.51)];
    [refresh2iconPath addLineToPoint: CGPointMake(-3.25, 10.27)];
    [refresh2iconPath addLineToPoint: CGPointMake(-5.5, 6.51)];
    [refresh2iconPath addLineToPoint: CGPointMake(-3.25, 6.51)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-6.02, 1.83) controlPoint1: CGPointMake(-3.38, 4.65) controlPoint2: CGPointMake(-4.35, 2.89)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-14.12, 3.78) controlPoint1: CGPointMake(-8.78, 0.07) controlPoint2: CGPointMake(-12.4, 0.95)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-12.22, 12.09) controlPoint1: CGPointMake(-15.83, 6.61) controlPoint2: CGPointMake(-14.98, 10.34)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-9.13, 13) controlPoint1: CGPointMake(-11.25, 12.71) controlPoint2: CGPointMake(-10.19, 13)];
    refresh2iconPath.miterLimit = 4;

    refresh2iconPath.lineCapStyle = kCGLineCapRound;

    refresh2iconPath.lineJoinStyle = kCGLineJoinRound;

    [UIColor.whiteColor setStroke];
    refresh2iconPath.lineWidth = 1.5;
    [refresh2iconPath stroke];

    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(6, 1)];
    [bezierPath addLineToPoint: CGPointMake(6, 5)];
    [bezierPath addLineToPoint: CGPointMake(10, 3)];
    [bezierPath addLineToPoint: CGPointMake(6, 1)];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
}

+ (void)drawSliderThumb
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 12, 12)];
    [UIColor.whiteColor setFill];
    [ovalPath fill];
}

+ (void)drawReload
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// refresh-2-icon Drawing
    CGContextSaveGState(context);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* refresh2iconPath = [UIBezierPath bezierPath];
    [refresh2iconPath moveToPoint: CGPointMake(-2.93, 5.59)];
    [refresh2iconPath addLineToPoint: CGPointMake(-1, 5.59)];
    [refresh2iconPath addLineToPoint: CGPointMake(-2.93, 8.72)];
    [refresh2iconPath addLineToPoint: CGPointMake(-4.86, 5.59)];
    [refresh2iconPath addLineToPoint: CGPointMake(-2.93, 5.59)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-5.3, 1.68) controlPoint1: CGPointMake(-3.04, 4.03) controlPoint2: CGPointMake(-3.87, 2.56)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-12.24, 3.31) controlPoint1: CGPointMake(-7.67, 0.21) controlPoint2: CGPointMake(-10.78, 0.94)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-10.61, 10.24) controlPoint1: CGPointMake(-13.71, 5.67) controlPoint2: CGPointMake(-12.98, 8.78)];
    [refresh2iconPath addCurveToPoint: CGPointMake(-7.97, 11) controlPoint1: CGPointMake(-9.79, 10.76) controlPoint2: CGPointMake(-8.88, 11)];
    refresh2iconPath.miterLimit = 4;

    refresh2iconPath.lineCapStyle = kCGLineCapRound;

    refresh2iconPath.lineJoinStyle = kCGLineJoinRound;

    [UIColor.whiteColor setStroke];
    refresh2iconPath.lineWidth = 1.5;
    [refresh2iconPath stroke];

    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(6, 1)];
    [bezierPath addLineToPoint: CGPointMake(6, 5)];
    [bezierPath addLineToPoint: CGPointMake(9, 3)];
    [bezierPath addLineToPoint: CGPointMake(6, 1)];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfPlay
{
    if (_imageOfPlay)
        return _imageOfPlay;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 16), NO, 0.0f);
    [YSVideoPlayerStyleKit drawPlay];

    _imageOfPlay = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfPlay;
}

+ (UIImage*)imageOfPause
{
    if (_imageOfPause)
        return _imageOfPause;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 15), NO, 0.0f);
    [YSVideoPlayerStyleKit drawPause];

    _imageOfPause = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfPause;
}

+ (UIImage*)imageOfReplay
{
    if (_imageOfReplay)
        return _imageOfReplay;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(14, 16), NO, 0.0f);
    [YSVideoPlayerStyleKit drawReplay];

    _imageOfReplay = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfReplay;
}

+ (UIImage*)imageOfSliderThumb
{
    if (_imageOfSliderThumb)
        return _imageOfSliderThumb;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(12, 12), NO, 0.0f);
    [YSVideoPlayerStyleKit drawSliderThumb];

    _imageOfSliderThumb = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfSliderThumb;
}

+ (UIImage*)imageOfReload
{
    if (_imageOfReload)
        return _imageOfReload;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(12, 15), NO, 0.0f);
    [YSVideoPlayerStyleKit drawReload];

    _imageOfReload = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfReload;
}

#pragma mark Customization Infrastructure

- (void)setPlayTargets: (NSArray*)playTargets
{
    _playTargets = playTargets;

    for (id target in self.playTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfPlay];
}

- (void)setPauseTargets: (NSArray*)pauseTargets
{
    _pauseTargets = pauseTargets;

    for (id target in self.pauseTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfPause];
}

- (void)setReplayTargets: (NSArray*)replayTargets
{
    _replayTargets = replayTargets;

    for (id target in self.replayTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfReplay];
}

- (void)setSliderThumbTargets: (NSArray*)sliderThumbTargets
{
    _sliderThumbTargets = sliderThumbTargets;

    for (id target in self.sliderThumbTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfSliderThumb];
}

- (void)setReloadTargets: (NSArray*)reloadTargets
{
    _reloadTargets = reloadTargets;

    for (id target in self.reloadTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfReload];
}


@end
