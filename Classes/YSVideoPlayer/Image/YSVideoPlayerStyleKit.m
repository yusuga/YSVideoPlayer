//
//  YSVideoPlayerStyleKit.m
//  YSVideoPlayer
//
//  Created by Yu Sugawara on 2015/11/26.
//  Copyright (c) 2015 Picos LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "YSVideoPlayerStyleKit.h"


@implementation YSVideoPlayerStyleKit

#pragma mark Cache

static UIImage* _imageOfPlay = nil;
static UIImage* _imageOfPause = nil;
static UIImage* _imageOfReplay = nil;
static UIImage* _imageOfSliderThumb = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawPlay
{

    //// arrow-37-icon Drawing
    UIBezierPath* arrow37iconPath = [UIBezierPath bezierPath];
    [arrow37iconPath moveToPoint: CGPointMake(10, 8)];
    [arrow37iconPath addLineToPoint: CGPointMake(0, 16)];
    [arrow37iconPath addLineToPoint: CGPointMake(0, 0)];
    [arrow37iconPath addLineToPoint: CGPointMake(10, 8)];
    [arrow37iconPath closePath];
    arrow37iconPath.miterLimit = 4;

    [UIColor.whiteColor setFill];
    [arrow37iconPath fill];
}

+ (void)drawPause
{

    //// pause-icon Drawing
    UIBezierPath* pauseiconPath = [UIBezierPath bezierPath];
    [pauseiconPath moveToPoint: CGPointMake(3.79, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(0, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(0, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(3.79, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(3.79, 15)];
    [pauseiconPath closePath];
    [pauseiconPath moveToPoint: CGPointMake(10, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(6.21, 0)];
    [pauseiconPath addLineToPoint: CGPointMake(6.21, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(10, 15)];
    [pauseiconPath addLineToPoint: CGPointMake(10, 0)];
    [pauseiconPath closePath];
    pauseiconPath.miterLimit = 4;

    [UIColor.whiteColor setFill];
    [pauseiconPath fill];
}

+ (void)drawReplay
{

    //// refresh-2-icon Drawing
    UIBezierPath* refresh2iconPath = [UIBezierPath bezierPath];
    [refresh2iconPath moveToPoint: CGPointMake(5.84, 1.2)];
    [refresh2iconPath addCurveToPoint: CGPointMake(2.09, 7.6) controlPoint1: CGPointMake(3.54, 2.64) controlPoint2: CGPointMake(2.22, 5.06)];
    [refresh2iconPath addLineToPoint: CGPointMake(0, 7.6)];
    [refresh2iconPath addLineToPoint: CGPointMake(3.35, 10.98)];
    [refresh2iconPath addLineToPoint: CGPointMake(6.71, 7.6)];
    [refresh2iconPath addLineToPoint: CGPointMake(4.64, 7.6)];
    [refresh2iconPath addCurveToPoint: CGPointMake(7.19, 3.38) controlPoint1: CGPointMake(4.76, 5.92) controlPoint2: CGPointMake(5.66, 4.33)];
    [refresh2iconPath addCurveToPoint: CGPointMake(14.64, 5.14) controlPoint1: CGPointMake(9.73, 1.8) controlPoint2: CGPointMake(13.06, 2.58)];
    [refresh2iconPath addCurveToPoint: CGPointMake(12.89, 12.62) controlPoint1: CGPointMake(16.21, 7.69) controlPoint2: CGPointMake(15.43, 11.04)];
    [refresh2iconPath addCurveToPoint: CGPointMake(5.88, 11.48) controlPoint1: CGPointMake(10.57, 14.07) controlPoint2: CGPointMake(7.58, 13.53)];
    [refresh2iconPath addLineToPoint: CGPointMake(4.09, 13.31)];
    [refresh2iconPath addCurveToPoint: CGPointMake(14.23, 14.8) controlPoint1: CGPointMake(6.61, 16.17) controlPoint2: CGPointMake(10.89, 16.88)];
    [refresh2iconPath addCurveToPoint: CGPointMake(16.8, 3.78) controlPoint1: CGPointMake(17.97, 12.47) controlPoint2: CGPointMake(19.12, 7.54)];
    [refresh2iconPath addCurveToPoint: CGPointMake(5.84, 1.2) controlPoint1: CGPointMake(14.49, 0.03) controlPoint2: CGPointMake(9.58, -1.13)];
    [refresh2iconPath closePath];
    refresh2iconPath.miterLimit = 4;

    [UIColor.whiteColor setFill];
    [refresh2iconPath fill];
}

+ (void)drawSliderThumb
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 12, 12)];
    [UIColor.whiteColor setFill];
    [ovalPath fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfPlay
{
    if (_imageOfPlay)
        return _imageOfPlay;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 16), NO, 0.0f);
    [YSVideoPlayerStyleKit drawPlay];

    _imageOfPlay = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfPlay;
}

+ (UIImage*)imageOfPause
{
    if (_imageOfPause)
        return _imageOfPause;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(10, 15), NO, 0.0f);
    [YSVideoPlayerStyleKit drawPause];

    _imageOfPause = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfPause;
}

+ (UIImage*)imageOfReplay
{
    if (_imageOfReplay)
        return _imageOfReplay;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 16), NO, 0.0f);
    [YSVideoPlayerStyleKit drawReplay];

    _imageOfReplay = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfReplay;
}

+ (UIImage*)imageOfSliderThumb
{
    if (_imageOfSliderThumb)
        return _imageOfSliderThumb;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(12, 12), NO, 0.0f);
    [YSVideoPlayerStyleKit drawSliderThumb];

    _imageOfSliderThumb = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfSliderThumb;
}

#pragma mark Customization Infrastructure

- (void)setPlayTargets: (NSArray*)playTargets
{
    _playTargets = playTargets;

    for (id target in self.playTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfPlay];
}

- (void)setPauseTargets: (NSArray*)pauseTargets
{
    _pauseTargets = pauseTargets;

    for (id target in self.pauseTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfPause];
}

- (void)setReplayTargets: (NSArray*)replayTargets
{
    _replayTargets = replayTargets;

    for (id target in self.replayTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfReplay];
}

- (void)setSliderThumbTargets: (NSArray*)sliderThumbTargets
{
    _sliderThumbTargets = sliderThumbTargets;

    for (id target in self.sliderThumbTargets)
        [target performSelector: @selector(setImage:) withObject: YSVideoPlayerStyleKit.imageOfSliderThumb];
}


@end
